#!/usr/bin/python

# This file is part of eVic SDK.
#
# eVic SDK is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# eVic SDK is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with eVic SDK.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2016 ReservedField

# Depends on PIL and bitarray.
# On Cygwin PIL is python-imaging.
# Bitarray can be obtained via pip:
#    pip install bitarray

import sys
import argparse
from PIL import Image
from bitarray import bitarray

# Parse command-line arguments
parser = argparse.ArgumentParser(description='Convert images to eVic SDK bitmap format.')
parser.add_argument('bitmapName', metavar='name', type=str, help='C bitmap name')
parser.add_argument('fileName', metavar='file', type=str, help='input file name')
parser.add_argument('--invert', dest='invert', action='store_const',
	const=True, default=False, help='invert image colors')
args = parser.parse_args()

# Open image and convert to greyscale, then to pure B/W
img = Image.open(args.fileName)
img = img.convert('L')
img = img.point(lambda x: 0 if x < 32 else 255, '1')
width, height = img.size

# Convert to column-major, 8 pixels/byte, topmost = LSB
imgPixels = img.load()
imgBits = bitarray(endian='little')
for x in range(width):
	for y in range(height):
		imgBits.append(imgPixels[x, y] // 0xFF)
	# Pad column to byte boundary
	imgBits.fill()
if args.invert:
	imgBits.invert()
imgBytes = imgBits.tobytes() if hasattr(imgBits, 'tobytes') else imgBits.tostring()

# Print image to stderr
# Grab this from the bit array to check the conversion
for y in range(height):
	for x in range(width):
		sys.stderr.write('#' if imgBits[x * ((height + 7) & ~7) + y] == 1 else ' ')
	sys.stderr.write('\n')

# Output C header
print(('#include <stdint.h>\n\n'
       '#ifndef {0}_H\n'
       '#define {0}_H\n\n'
       'uint8_t {1}[] = {{')
       .format(args.bitmapName.upper(), args.bitmapName))
byteLines = [imgBytes[i:i+8] for i in range(0, len(imgBytes), 8)]
for idx, line in enumerate(byteLines):
	lineStr = '\t' + ', '.join(['0x{:02X}'.format(b) for b in bytearray(line)])
	if idx != len(byteLines) - 1:
		lineStr += ','
	print(lineStr)
print(('}};\n\n'
	   'int {0}_width  = {1};\n'
	   'int {0}_height = {2};\n\n'
	   '#endif')
	   .format(args.bitmapName, width, height))
